@startuml IO Monad Hierarchy
!include https://raw.githubusercontent.com/ncosta-ic/catppuccin-macchiato-plantuml-theme/main/theme.puml
interface Kind<F, A>
interface "IOKind<A> extends Kind<IOKind<?>, A>"

interface Functor<F> {
  + Kind<F, B> map(Function<A, B>, Kind<F, A>)
}
interface Applicative<F> extends Functor<F> {
  + Kind<F, A> of(A)
  + Kind<F, B> ap(Kind<F, Function<A, B>>, Kind<F, A>)
}
interface Monad<F> extends Applicative<F> {
  + Kind<F, B> flatMap(Function<A, Kind<F, B>>, Kind<F, A>)
}


class IOKindHelper {
 {static} Kind<IOKind<?>, A> wrap(IO<A>)
 {static} IO<A> unwrap(Kind<IOKind<?>, A>)
 ' ...
}

class IOFunctor implements Functor<IOKind<?>> {
 + Kind<IOKind<?>, B> map(Function<A, B>, Kind<IOKind<?>, A>)
}
IOFunctor ..> IOKindHelper : uses

class IOApplicative extends IOFunctor implements Applicative<IOKind<?>> {
  + Kind<IOKind<?>, A> of(A)
  + Kind<IOKind<?>, B> ap(Kind<IOKind<?>, Function<A, B>>, Kind<IOKind<?>, A>)
}

class IOMonad extends IOApplicative implements Monad<IOKind<?>> {
 + Kind<IOKind<?>, B> flatMap(Function<A, Kind<IOKind<?>, B>>, Kind<IOKind<?>, A>)
}

@enduml