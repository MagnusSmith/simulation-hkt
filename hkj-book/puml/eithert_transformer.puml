@startuml EitherT_Diagram
!theme plain
!include https://raw.githubusercontent.com/ncosta-ic/catppuccin-macchiato-plantuml-theme/main/theme.puml
skinparam classAttributeIconSize 0
skinparam defaultFontName "Roboto, Helvetica"
hide empty members

interface Kind<F, A>

interface "Monad<F> extends Applicative<F>"
interface "MonadError<F, E> extends Monad<F>"

' --- Either Components ---
interface EitherKind<L, R> extends Kind<EitherKind<L, ?>, R> {
  + {abstract} fold(Function<L, T>, Function<R, T>): T
  + {abstract} isLeft(): boolean
  + {abstract} isRight(): boolean
  + {abstract} getLeft(): L <<throws>>
  + {abstract} getRight(): R <<throws>>
  + {abstract} map(Function<R, R_OUT>): Either<L, R_OUT>
  + {abstract} flatMap(Function<R, Either<L, R_OUT>>): Either<L, R_OUT>
  ' ... other Either methods
}
class Either<L, R> {
  + {static} left(L): Either<L, R>
  + {static} right(R): Either<L, R>
}
note right of Either: Concrete implementation (e.g., using sealed interface with Left/Right records) not shown fully.

' --- EitherT Components ---

interface EitherTKind<F, L, R> extends Kind<EitherTKind<F, L, ?>, R> {
  ' Marker interface for HKT simulation '
}

class EitherT<F, L, R> <<record>> {
  + EitherT(Kind<F, Either<L, R>> value)
  __ Methods __
  + {static} fromKind(Kind<F, Either<L, R>>): EitherT<F, L, R>
  + {static} right(Monad<F>, R): EitherT<F, L, R>
  + {static} left(Monad<F>, L): EitherT<F, L, R>
  + {static} fromEither(Monad<F>, Either<L, R>): EitherT<F, L, R>
  + {static} liftF(Monad<F>, Kind<F, R>): EitherT<F, L, R>
}

class EitherTKindHelper<F, L> <<utility>> {
  + {static} wrap(EitherT<F, L, R>): EitherTKind<F, L, R>
  + {static} unwrap(Kind<EitherTKind<F, L, ?>, R>): EitherT<F, L, R>
  ' --- private internal holder --- '
  - {static} record EitherTHolder<F_HOLDER, L_HOLDER, R_HOLDER>(EitherT<F_HOLDER, L_HOLDER, R_HOLDER>) implements EitherTKind<F_HOLDER, L_HOLDER, R_HOLDER>
}

class EitherTMonad<F, L> implements MonadError<EitherTKind<F, L, ?>, L> {
  - outerMonad: Monad<F>
  + EitherTMonad(Monad<F>)
  + of(R): Kind<EitherTKind<F, L, ?>, R>
  + map(Function<R_IN, R_OUT>, Kind<...>): Kind<...>
  + ap(Kind<...Func...>, Kind<...Val...>): Kind<...>
  + flatMap(Function<R_IN, Kind<...>>, Kind<...>): Kind<...>
  + raiseError(L): Kind<EitherTKind<F, L, ?>, R>
  + handleErrorWith(Kind<...>, Function<L, Kind<...>>): Kind<...>
}

' --- Relationships ---

EitherT *-- Kind : contains >
note on link: EitherT holds Kind<F, Either<L, R>>

EitherTKindHelper --> EitherT : <<uses>> wrap/unwrap
EitherTKindHelper --> EitherTKind : <<creates>> via wrap

EitherTKindHelper +-- EitherTKindHelper.EitherTHolder : internal record >
EitherTKindHelper.EitherTHolder ..|> EitherTKind : implements
EitherTKindHelper.EitherTHolder *-- EitherT : holds >

EitherTMonad --> EitherTKindHelper : <<uses>>
EitherTMonad --> Monad : requires >
note on link: Requires Monad<F> instance

EitherTMonad ..|> MonadError : implements

@enduml