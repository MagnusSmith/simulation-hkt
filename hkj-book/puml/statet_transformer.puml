@startuml StateT_Transformer
!theme materia

' Style similar to other HKJ diagrams
skinparam classAttributeIconSize 0
skinparam defaultFontName "Roboto, Helvetica"
skinparam defaultFontSize 12
skinparam roundcorner 20
skinparam stereotypeCBackgroundColor #A9DCDF
skinparam stereotypePBackgroundColor #A9DCDF

!include https://raw.githubusercontent.com/ncosta-ic/catppuccin-macchiato-plantuml-theme/main/theme.puml



' Core HKT interfaces
interface Kind<F, A> {
  ' F is the HKT witness (phantom type)
  ' A is the value type
}
interface Monad<F> extends Applicative<F> {
  + flatMap(fn: Function<A, Kind<F, B>>, fa: Kind<F, A>): Kind<F, B>
}
interface Applicative<F> extends Functor<F> {
  + of(a: A): Kind<F, A>
  + ap(ff: Kind<F, Function<A,B>>, fa: Kind<F, A>): Kind<F, B>
}
interface Functor<F> {
  + map(fn: Function<A, B>, fa: Kind<F, A>): Kind<F, B>
}

' StateTuple
class StateTuple<S, A> {
  + S state
  + A value
  + {static} of(s: S, a: A): StateTuple<S, A>
}

' StateT specific classes

  class "StateT<S, F_WITNESS, A>" as StateT {
    ' S: State type
    ' F_WITNESS: Witness for the underlying monad F
    ' A: Value type
    - run: Function<S, Kind<F_WITNESS, StateTuple<S, A>>>
    - monadF: Monad<F_WITNESS>
    + {static} create(run: Function<S, Kind<F_WITNESS, StateTuple<S, A>>>, monadF: Monad<F_WITNESS>): StateT<S, F_WITNESS, A>
    + runStateT(s: S): Kind<F_WITNESS, StateTuple<S, A>>
    + evalStateT(s: S): Kind<F_WITNESS, A>
    + execStateT(s: S): Kind<F_WITNESS, S>
  }

  interface "StateTKind.Witness<S, F_WITNESS>" as StateTWitness {
    ' Phantom type for HKT encoding
    ' S: State type
    ' F_WITNESS: Witness for the underlying monad F
  }

  interface "StateTKind<S, F_WITNESS, A>" as StateTKind extends Kind<StateTKind.Witness<S, F_WITNESS>, A> {
    ' Represents StateT as a Kind
  }

  class "StateTMonad<S, F_WITNESS>" as StateTMonadInstance implements Monad<StateTKind.Witness<S, F_WITNESS>> {
    ' S: State type
    ' F_WITNESS: Witness for the underlying monad F
    - monadF: Monad<F_WITNESS>
    + {static} instance(monadF: Monad<F_WITNESS>): StateTMonad<S, F_WITNESS>
    ' Inherits of, map, ap, flatMap
  }

  class StateTKindHelper {
    + {static} narrow(kind: Kind<StateTKind.Witness<S, F_WITNESS>, A>): StateT<S, F_WITNESS, A>
    + {static} wrap(stateT: StateT<S, F_WITNESS, A>): Kind<StateTKind.Witness<S, F_WITNESS>, A>
    + {static} runStateT(kind: Kind<StateTKind.Witness<S, F_WITNESS>, A>, s: S): Kind<F_WITNESS, StateTuple<S, A>>
    + {static} evalStateT(kind: Kind<StateTKind.Witness<S, F_WITNESS>, A>, s: S): Kind<F_WITNESS, A>
    + {static} execStateT(kind: Kind<StateTKind.Witness<S, F_WITNESS>, A>, s: S): Kind<F_WITNESS, S>
    + {static} lift(fn: Function<S, Kind<F_WITNESS, StateTuple<S,A>>>, monadF: Monad<F_WITNESS>) : Kind<StateTKind.Witness<S, F_WITNESS>, A>
  }


' Relationships
StateT ..|> StateTKind : implements
StateTKind ..> StateTWitness : uses witness (phantom)
StateTMonadInstance ..|> Monad : implements
StateTMonadInstance ..> StateTWitness : uses witness (for Monad<F>)
StateTMonadInstance ..> "Monad<F_WITNESS>" : depends on (holds ref to underlying monadF)
StateT ..> "Monad<F_WITNESS>" : depends on (holds ref to underlying monadF)
StateT ..> StateTuple : uses (in its run function's return type)
StateTKindHelper ..> StateT : narrows to/wraps
StateTKindHelper ..> StateTKind : operates on
StateTKindHelper ..> StateTWitness : uses witness
StateTKindHelper ..> StateTuple : uses (in runStateT return type)
StateTKindHelper ..> "Monad<F_WITNESS>" : uses (for lift)


' Example Underlying Monad (e.g., OptionalKind)

  interface "OptionalKind.Witness" as OptionalWitness
  interface "OptionalKind<A>" as OptionalKindHKT extends "Kind<OptionalKind.Witness, A>"
  class OptionalMonad implements "Monad<OptionalKind.Witness>"

StateTMonadInstance o--> OptionalMonad : (example) monadF can be
StateT o--> OptionalMonad : (example) monadF can be
StateT o--> "Kind<OptionalKind.Witness, StateTuple<S,A>>" : (example) run fn returns

@enduml
