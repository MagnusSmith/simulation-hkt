@startuml CompletableFuture Components
!include https://raw.githubusercontent.com/ncosta-ic/catppuccin-macchiato-plantuml-theme/main/theme.puml

class CompletableFuture<A> {
 + {static} CompletableFuture<A> completedFuture(A)
 + {static} CompletableFuture<A> failedFuture(Throwable)
 + CompletableFuture<B> thenApply(Function<A, B>)
 + CompletableFuture<B> thenCompose(Function<A, CompletableFuture<B>>)
 + CompletableFuture<C> thenCombine(CompletableFuture<B>, BiFunction<A, B, C>)
 + CompletableFuture<A> exceptionallyCompose(Function<Throwable, CompletableFuture<A>>)
 + A join()
 + boolean isDone()
 + boolean isCompletedExceptionally()
}

interface Kind<F, A> <<HKT Bridge>>

interface CompletableFutureKind<A> extends Kind<CompletableFutureKind<?>, A> {
  ' HKT Marker for CompletableFuture
  ' Witness F = CompletableFutureKind<?>
  ' Value Type A = A
}

package helper <<Rectangle>> {
  class CompletableFutureKindHelper {
    .. Static Helper Methods ..
    + {static} CompletableFutureKind<A> wrap(CompletableFuture<A>)
    + {static} CompletableFuture<A> unwrap(Kind<CompletableFutureKind<?>, A>)
    + {static} A join(Kind<CompletableFutureKind<?>, A>)
  }

  ' Internal Holder Record
  class CompletableFutureHolder<A> implements CompletableFutureKind<A> {
    - CompletableFuture<A> future
  }
  CompletableFutureKindHelper ..> CompletableFutureHolder : creates >
  CompletableFutureKindHelper --> CompletableFuture : uses >
  CompletableFutureHolder o--> CompletableFuture : holds
}

interface Functor<F>
interface "Applicative<F> extends Functor<F>"
interface "Monad<F> extends Applicative<F>"
interface "MonadError<F, E> extends Monad<F>"

class CompletableFutureFunctor implements Functor<CompletableFutureKind<?>> {
 + Kind<CFK, B> map(Function<A, B>, Kind<CFK, A>) ' CFK = CompletableFutureKind<?>
}
CompletableFutureFunctor ..> CompletableFutureKindHelper : uses

class CompletableFutureApplicative extends CompletableFutureFunctor implements Applicative<CompletableFutureKind<?>> {
  + Kind<CFK, A> of(A)
  + Kind<CFK, B> ap(Kind<CFK, Function<A, B>>, Kind<CFK, A>)
}

class CompletableFutureMonad extends CompletableFutureApplicative implements Monad<CompletableFutureKind<?>> {
 + Kind<CFK, B> flatMap(Function<A, Kind<CFK, B>>, Kind<CFK, A>)
}

class CompletableFutureMonadError extends CompletableFutureMonad implements MonadError<CompletableFutureKind<?>, Throwable> {
  + Kind<CFK, A> raiseError(Throwable)
  + Kind<CFK, A> handleErrorWith(Kind<CFK, A>, Function<Throwable, Kind<CFK, A>>)
}

@enduml