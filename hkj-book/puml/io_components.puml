@startuml IO Components
!include https://raw.githubusercontent.com/ncosta-ic/catppuccin-macchiato-plantuml-theme/main/theme.puml

interface Supplier<T> {
  + T get()
}

interface IO<A> {
  + {abstract} A unsafeRunSync()
  + {static} IO<A> delay(Supplier<A>)
  + IO<B> map(Function<? super A, ? extends B>)
  + IO<B> flatMap(Function<? super A, ? extends IO<B>>)
}
IO ..> Supplier : uses >

interface Kind<F, A> <<HKT Bridge>> {
}

interface IOKind<A> extends Kind<IOKind<?>, A> {
  ' HKT Marker for IO
  ' Witness F = IOKind<?>
  ' Value Type A = A
}

package helper <<Rectangle>> {
  class IOKindHelper {
    .. Static Helper Methods ..
    + {static} IOKind<A> wrap(IO<A>)
    + {static} IO<A> unwrap(Kind<IOKind<?>, A>)
    + {static} Kind<IOKind<?>, A> delay(Supplier<A>)
    + {static} A unsafeRunSync(Kind<IOKind<?>, A>)
  }

  ' Internal Holder Record
  class IOHolder<A> implements IOKind<A> {
    - IO<A> ioInstance
  }
  IOKindHelper ..> IOHolder : creates >
  IOKindHelper --> IO : uses >
  IOHolder o--> IO : holds
}


interface Functor<F>
interface "Applicative<F> extends Functor<F>"
interface "Monad<F> extends Applicative<F>"

class IOFunctor implements Functor<IOKind<?>> {
 + Kind<IOKind<?>, B> map(Function<A, B>, Kind<IOKind<?>, A>)
}
IOFunctor ..> IOKindHelper : uses

class IOApplicative extends IOFunctor implements Applicative<IOKind<?>> {
  + Kind<IOKind<?>, A> of(A)
  + Kind<IOKind<?>, B> ap(Kind<IOKind<?>, Function<A, B>>, Kind<IOKind<?>, A>)
}

class IOMonad extends IOApplicative implements Monad<IOKind<?>> {
 + Kind<IOKind<?>, B> flatMap(Function<A, Kind<IOKind<?>, B>>, Kind<IOKind<?>, A>)
}


@enduml